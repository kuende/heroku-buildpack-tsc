#!/usr/bin/env bash

if [ -z "${NODE_APP_PREFIX}" ]; then
  app_folder="${1:-}"
else
  app_folder="${1:-}/$NODE_APP_PREFIX"
fi

BUILD_DIR=$app_folder
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

TSC=$BUILD_DIR/node_modules/.bin/tsc

LOG_FILE=$(mktemp -t tsc-build-log.XXXXX)
echo "" > "$LOG_FILE"

set -o pipefail

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/env.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/tsc.sh

### Setting development environment

header "Creating build environment"
export_env_dir "$ENV_DIR"
create_build_env

[ -f "$BUILD_DIR/yarn.lock" ] && YARN=true || YARN=false
[ "$TSC_CUSTOM_FILE" = "tsconfig.json" ] && CUSTOM_TSC=false || CUSTOM_TSC=true

### Prepare TypeScript configuration file for production environment

header "Preparing TypeScript configuration"
prepare_tsconfig | output $LOG_FILE

build_dependencies() {
    if $YARN; then
        yarn_node_modules "$BUILD_DIR"
    elif [ -f $TSC ]; then
        echo "Build dependencies detected (tsc binary exists)"
    else
        npm_node_modules "$BUILD_DIR"
    fi

    if $NODE_VERBOSE; then
        list_dependencies "$BUILD_DIR"
    fi
}

header "Installing build dependencies"
build_dependencies | output $LOG_FILE

header "Building application with tsc $($TSC --version | sed 's/Version //')"
# compile_ts "$BUILD_DIR" "$TSC_CONFIG_PATH" | output $LOG_FILE
cd $BUILD_DIR
npm run build
if [ $? == "0" ]; then
    header "Build succeeded!"
else
    header "Build failed"
fi
